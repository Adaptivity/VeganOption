buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

apply plugin: 'forge'

minecraft {
	version = "1.7.10-10.13.1.1225"
}

group = project.projectDir.name.toLowerCase()
archivesBaseName = project.projectDir.name + "-mc" + project.minecraft.version

sourceSets.main{
	java {
		srcDirs 'java', 'apis' //set the source folder as the /src subfolder
	}
	resources {
		srcDirs 'resources' //set the resources folder as the /resources subfolder
	}
}

repositories {
	maven {
		url "http://mobiusstrip.eu/maven"
	}
	maven {
		url "http://chickenbones.net/maven/"
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: '*.jar,*.zip')
    compile "mcp.mobius.waila:Waila:1.5.5_1.7.10"
}

jar {
	manifest {
		attributes 'FMLCorePlugin': 'squeek.veganoption.asm.ASMPlugin'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
}

def getLastTaggedCommit() {
	return getLastTaggedCommit(0)
}

def getLastTaggedCommit(int skip) {
	def lastTagProc = "git rev-list HEAD --tags --max-count=1 --no-walk --skip=$skip".execute()
	lastTagProc.waitForOrKill(1000)
	assert lastTagProc.exitValue() == 0, lastTagProc.err.text
	def lastTag = lastTagProc.in.text.trim()

	if (lastTag.equals(getHeadCommit()))
		return getLastTaggedCommit(1)
	else
		return lastTag
}

def getHeadCommit() {
	def headProc = "git rev-parse HEAD".execute()
	headProc.waitForOrKill(1000)
	assert headProc.exitValue() == 0, headProc.err.text
	return headProc.in.text.trim()
}

def getChangelogSince(String commitSHA) {
	def changelog = ""
	def range = commitSHA.isEmpty() ? "HEAD" : "$commitSHA..HEAD"
	def cmd = ["git", "log", "--no-merges", "--format=- %B", "$range"]
	def changelogProc = cmd.execute()
	changelogProc.in.eachLine { line ->
		if (!line.isEmpty()) {
			changelog += line + "\n"
		}
	}
	changelogProc.err.eachLine { line -> println line }
	return changelog
}

task changelog() << {
	def changelogFile = new File(project.buildDir.getPath() + '/changelog.md')
	changelogFile.delete()

	def lastTag = getLastTaggedCommit()
	def changelog = getChangelogSince(lastTag)
	println changelog
	changelogFile << changelog
}

// variable substitution in java files
task processSourceMainJava(type:Copy) {
	inputs.property "vars", project.version + project.minecraft.version
	from('java')
	{
		include '**/ModInfo.java'
		include '**/package-info.java'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
	into project.buildDir.getPath()+"/sources/java"
}

// correct task ordering
afterEvaluate { project ->
	sourceMainJava.finalizedBy(processSourceMainJava)
}

processResources {
	inputs.property "vars", project.version + project.minecraft.version
	from(sourceSets.main.resources.srcDirs) {
		include '**/*.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
	from(sourceSets.main.resources.srcDirs) {
		exclude '**/*.info'
	}
}